// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  name          String
  department    String? // Nullable field
  voiceUrl      String?         @map("voice_url")
  participants  Participants[]
  voiceEmotion  VoiceEmotion[]
  facialEmotion FacialEmotion[]

  @@map("user")
}

model Meeting {
  id            Int             @id @default(autoincrement())
  title         String
  organizer     String
  filePath      String?         @map("file_path") // Nullable field
  summary       String?
  participants  Participants[]
  quizzes       Quiz[]
  voiceEmotion  VoiceEmotion[]
  facialEmotion FacialEmotion[]

  @@map("meeting")
}

model Participants {
  meetingId Int     @map("meeting_id")
  userId    Int     @map("user_id")
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([meetingId, userId]) // Composite primary key
  @@map("participants")
}

model Quiz {
  id                 Int     @id @default(autoincrement())
  meetingId          Int     @map("meeting_id")
  question           String
  options            String // Stored as JSON or delimited list
  answer             String
  hallucinationScore Float?  @map("hallucination_score") // Nullable field
  meeting            Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@map("quiz")
}

model VoiceEmotion {
  userId            Int     @map("user_id")
  meetingId         Int     @map("meeting_id")
  angry             Float   @default(0)
  sad               Float   @default(0)
  neutral           Float   @default(0)
  happy             Float   @default(0)
  interruptionCount Int     @default(0) @map("interruption_count")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  meeting           Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@id([userId, meetingId]) // Composite primary key
  @@map("voice_emotion")
}

model FacialEmotion {
  userId    Int     @map("user_id")
  meetingId Int     @map("meeting_id")
  sad       Float   @default(0)
  happy     Float   @default(0)
  angry     Float   @default(0)
  fear      Float   @default(0)
  disgust   Float   @default(0)
  neutral   Float   @default(0)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@id([userId, meetingId]) // Composite primary key
  @@map("facial_emotion")
}
